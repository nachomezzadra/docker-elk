input {
	tcp {
		type => "dss"
		port => 5000
	}

	tcp {
		type => "geo"
		port => 6000
	}

    file {
    	type => "geo"
        path => "/Users/nacho/workspace/GeoIPCity-534-Location.csv"
        start_position => beginning
    }

}

## Add your filters here

filter {

	if [type] == "dss" {
		grok {
			#Node Transition at 2015-10-29T16:39:03Z for UCID: 00002003761446157930, ANI: 55053, Call Flow Key: 54725, Call Flow Name: A Call Flow that changed its name just to see how it is reported in EP, MPP Session ID: RHEL6464AAEP7-2015302154144-19, UUI: , Sequence Number: 1, Source Node: init, Source Node Type: initial, Link Code: defaultLanguage, Target Node: decision, Target Node Type: decision, Call Center Service: .

			match => [ "message", "INFO  CALL_LOGGER_FILE  - Node Transition at %{TIMESTAMP_ISO8601:localTimestamp} for UCID: %{WORD:UCID}, ANI: %{WORD:ANI}, Call Flow Key: %{WORD:callFlowKey}, Call Flow Name: %{DATA:callFlowName}, MPP Session ID: %{DATA:mppSessionID}, UUI: %{DATA:uui}, Sequence Number: %{INT:sequenceNumber}, Source Node: %{DATA:souceNode}, Source Node Type: %{DATA:sourceNodeType}, Link Code: %{DATA:linkCode}, Target Node: %{DATA:targetNode}, Target Node Type: %{DATA:targetNodeType}, Call Center Service: %{DATA:callCenterService}"]

			match => [ "ANI", "^(\+? ?(?!9?\d{0}))?(\(?0?(?<areaCode>\d{3})\)? ?)" ]

			break_on_match => false
		}

		date { 
		    match => [ "localTimestamp", "ISO8601"]
		}		


		grok {
			#New Call Started at 2015-10-29T16:39:03Z with the following details.  UCID: 00002003761446157930,
    		match => ["message", "New Call Started at %{TIMESTAMP_ISO8601:startTimestamp} with the following details.  UCID: %{WORD:UCID},"]
    		add_tag => [ "callStarted" ]
  		}

		grok {
			#Call Ended at 2015-10-29T16:39:14Z with the following details.  UCID: 00002003761446157930,
    		match => ["message", "Call Ended at %{TIMESTAMP_ISO8601:startTimestamp} with the following details.  UCID: %{WORD:UCID},"]
    		add_tag => [ "callEnded" ]
  		}  		
    }


  	elapsed {
	    start_tag => "callStarted"
	    end_tag => "callEnded"
	    unique_id_field => "UCID"
	    timeout => 180
  	}


    if [type] == "geo" {
		csv {
		    columns => ["locId","country","region","city","postalCode","latitude","longitude","metroCode","areaCode"]
		    separator => ","
		}

		if [id] == "locId" {
		  drop { }
		} else {
			mutate {
		      convert => { "longitude" => "float" }
		      convert => { "latitude" => "float" }
		    }

		    mutate {
		      rename => {
		        "longitude" => "[location][lon]" 
		        "latitude" => "[location][lat]" 
		      }
		    }
		}
    }
}


# , Node Name: Pharmacy Transfer, Node Type: AGENT_QUEUE, Destination: AN_Pharmacy, Timestamp: 2015-10-07T14:59:53-0600, Sequence Number: 3, UCID: 00002004191444251429, Primary ANI: 18028254572
# area code es:  ^(\+?(?<country>\d{1,3}?) ?(?!9?\d{4}))?(\(?0?(?<area>\d{2})\)? ?)?(?<phone>9?\d{4}[-. ]?\d{4})$


output {
	elasticsearch { 
		  #index => "dss-%{+YYYY.MM.dd}"
	}

   # stdout {
   #      codec => rubydebug      
   #  }	
}
